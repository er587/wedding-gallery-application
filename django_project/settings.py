"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
import environ

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(list, ['localhost', '127.0.0.1', '0.0.0.0']),
    DATABASE_URL=(str, ''),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read .env file if it exists
env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# ALLOWED_HOSTS - Use environment variable for production domains
ALLOWED_HOSTS = env('ALLOWED_HOSTS')

# Add Replit dev URL if running in Replit environment
replit_dev_domain = os.environ.get('REPLIT_DEV_DOMAIN')
if replit_dev_domain and replit_dev_domain not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(replit_dev_domain)

# Also check for any .replit.dev domains in environment
for key, value in os.environ.items():
    if isinstance(value, str) and '.replit.dev' in value and value not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(value)

# CSRF trusted origins - Add development origins only if DEBUG is True
development_csrf_origins = [
    'http://localhost:5000',
    'http://127.0.0.1:5000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
] if DEBUG else []

# Get production CSRF origins from environment
csrf_origins_env = env.list('CSRF_TRUSTED_ORIGINS') if 'CSRF_TRUSTED_ORIGINS' in os.environ else []
CSRF_TRUSTED_ORIGINS = development_csrf_origins + csrf_origins_env

# Add Replit dev URLs to CSRF trusted origins
if replit_dev_domain:
    replit_origins = [
        f'https://{replit_dev_domain}',
        f'https://{replit_dev_domain}:5000',
        f'https://{replit_dev_domain}:8000',
    ]
    for origin in replit_origins:
        if origin not in CSRF_TRUSTED_ORIGINS:
            CSRF_TRUSTED_ORIGINS.append(origin)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'easy_thumbnails',
    'images',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'images.middleware.MediaCacheMiddleware',  # Cache headers for media files
]

# Only use clickjacking protection in production (not DEBUG) because the Development Web View uses
# iframes and needs to be a cross origin.
if not DEBUG:
    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# For Replit development, use SQLite. For production deployment, use PostgreSQL via DATABASE_URL
# This prevents database connection issues during development
database_url = env('DATABASE_URL') if not DEBUG else None

if database_url:
    DATABASES = {
        'default': dj_database_url.parse(database_url, conn_max_age=600)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = env('STATIC_ROOT') if 'STATIC_ROOT' in os.environ else os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for production static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'dist'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# CORS settings - SECURE DEFAULT FOR PRODUCTION
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS') if 'CORS_ALLOW_ALL_ORIGINS' in os.environ else DEBUG

# Configure CORS allowed origins - restrict localhost to DEBUG environments
development_cors_origins = [
    'http://localhost:5000',
    'http://127.0.0.1:5000',
] if DEBUG else []

# Get production CORS origins from environment
cors_origins_env = env.list('CORS_ALLOWED_ORIGINS') if 'CORS_ALLOWED_ORIGINS' in os.environ else []
CORS_ALLOWED_ORIGINS = development_cors_origins + cors_origins_env

CORS_ALLOW_CREDENTIALS = env.bool('CORS_ALLOW_CREDENTIALS') if 'CORS_ALLOW_CREDENTIALS' in os.environ else True

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = env('MEDIA_ROOT') if 'MEDIA_ROOT' in os.environ else os.path.join(BASE_DIR, 'media')

# Force HTTPS URLs in production
USE_TLS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Production security settings
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# Fail fast if production is using insecure SECRET_KEY
if not DEBUG and SECRET_KEY == 'django-insecure-change-this-in-production':
    raise Exception("Production deployment requires a secure SECRET_KEY. Please set a proper SECRET_KEY environment variable.")

# Easy-thumbnails configuration with responsive sizes
THUMBNAIL_ALIASES = {
    '': {
        # Square thumbnails for gallery grid (face-aware cropping)
        'square_160': {
            'size': (160, 160),
            'crop': True,
            'quality': 80,
        },
        'square_320': {
            'size': (320, 320),
            'crop': True,
            'quality': 80,
        },
        'square_640': {
            'size': (640, 640),
            'crop': True,
            'quality': 80,
        },
        
        # Width-constrained images for viewing (maintain aspect ratio)
        'width_480': {
            'size': (480, 0),
            'crop': False,
            'quality': 82,
        },
        'width_960': {
            'size': (960, 0),
            'crop': False,
            'quality': 82,
        },
        'width_1440': {
            'size': (1440, 0),
            'crop': False,
            'quality': 82,
        },
        
        # Legacy aliases for backward compatibility
        'small': {
            'size': (150, 150),
            'crop': True,
            'quality': 85,
        },
        'medium': {
            'size': (300, 300),
            'crop': True,
            'quality': 85,
        },
        'large': {
            'size': (600, 600),
            'crop': False,
            'quality': 90,
        },
    },
}

THUMBNAIL_PROCESSORS = [
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'images.thumbnail_processors.smart_crop.face_aware_crop',
    'easy_thumbnails.processors.scale_and_crop',
    'easy_thumbnails.processors.filters',
]

# Thumbnail storage and processing settings
THUMBNAIL_PRESERVE_FORMAT = True  # Keep original format unless converting to WebP
THUMBNAIL_HIGH_RESOLUTION = True  # Support high-DPI displays
THUMBNAIL_BASEDIR = 'thumbnails'  # Store in dedicated directory

# Email configuration
EMAIL_BACKEND = env('EMAIL_BACKEND') if 'EMAIL_BACKEND' in os.environ else 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST') if 'EMAIL_HOST' in os.environ else 'smtp.gmail.com'
EMAIL_PORT = env.int('EMAIL_PORT') if 'EMAIL_PORT' in os.environ else 587
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS') if 'EMAIL_USE_TLS' in os.environ else True
EMAIL_HOST_USER = env('EMAIL_HOST_USER') if 'EMAIL_HOST_USER' in os.environ else ''
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD') if 'EMAIL_HOST_PASSWORD' in os.environ else ''
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL') if 'DEFAULT_FROM_EMAIL' in os.environ else EMAIL_HOST_USER

# Base URL for email links (verification and password reset)
FRONTEND_URL = env('FRONTEND_URL') if 'FRONTEND_URL' in os.environ else 'http://localhost:5000'
