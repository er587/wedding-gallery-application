"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
import environ

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(list, ['localhost', '127.0.0.1', '0.0.0.0']),
    DATABASE_URL=(str, ''),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read .env file if it exists
env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY directly from os.environ to ensure Replit secrets work properly
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Handle Replit domains and custom domains if present, otherwise use env defaults
custom_domains = [
    'wedding-website-replit2779.replit.app',
    'reneeanderic.wedding',
    'www.reneeanderic.wedding'
]

try:
    replit_domains = os.environ["REPLIT_DOMAINS"].split(',')
    ALLOWED_HOSTS = replit_domains + custom_domains + env('ALLOWED_HOSTS')
except KeyError:
    ALLOWED_HOSTS = custom_domains + env('ALLOWED_HOSTS')
# Configure CSRF trusted origins
csrf_production_origins = [
    'https://wedding-website-replit2779.replit.app',
    'https://reneeanderic.wedding',
    'https://www.reneeanderic.wedding'
]

try:
    replit_domains = os.environ["REPLIT_DOMAINS"].split(',')
    CSRF_TRUSTED_ORIGINS = [
        "https://" + domain for domain in replit_domains
    ] + ["https://" + domain + ":5000" for domain in replit_domains] + [
        "https://" + domain + ":8000" for domain in replit_domains
    ] + csrf_production_origins + [
        'http://localhost:5000',
        'http://127.0.0.1:5000',
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]
except KeyError:
    CSRF_TRUSTED_ORIGINS = csrf_production_origins + [
        'http://localhost:5000',
        'http://127.0.0.1:5000',
        'http://localhost:8000',
        'http://127.0.0.1:8000',
    ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'easy_thumbnails',
    'images',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]

# Only use clickjacking protection in production (not DEBUG) because the Development Web View uses
# iframes and needs to be a cross origin.
if not DEBUG:
    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Use PostgreSQL if DATABASE_URL is provided, otherwise fallback to SQLite
database_url = env('DATABASE_URL')
if database_url:
    DATABASES = {
        'default': dj_database_url.parse(database_url, conn_max_age=600)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = env('STATIC_ROOT') if 'STATIC_ROOT' in os.environ else os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for production static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'dist'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# CORS settings from environment - SECURE DEFAULT FOR PRODUCTION
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS') if 'CORS_ALLOW_ALL_ORIGINS' in os.environ else DEBUG

# Configure CORS allowed origins - restrict localhost to DEBUG environments
cors_defaults = [
    'http://localhost:5000',
    'http://127.0.0.1:5000',
] if DEBUG else []

# Add production domains for CORS
production_origins = [
    'https://wedding-website-replit2779.replit.app',
    'https://reneeanderic.wedding',
    'https://www.reneeanderic.wedding'
]

try:
    replit_domains = os.environ["REPLIT_DOMAINS"].split(',')
    replit_cors_origins = [
        "https://" + domain for domain in replit_domains
    ] + ["https://" + domain + ":5000" for domain in replit_domains]
    CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS') if 'CORS_ALLOWED_ORIGINS' in os.environ else (cors_defaults + replit_cors_origins + production_origins)
except KeyError:
    CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS') if 'CORS_ALLOWED_ORIGINS' in os.environ else (cors_defaults + production_origins)

CORS_ALLOW_CREDENTIALS = env.bool('CORS_ALLOW_CREDENTIALS') if 'CORS_ALLOW_CREDENTIALS' in os.environ else True

# Media files - Cloud Storage Configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = env('MEDIA_ROOT') if 'MEDIA_ROOT' in os.environ else os.path.join(BASE_DIR, 'media')

# Cloud Storage Configuration for Replit App Storage
USE_CLOUD_STORAGE = env.bool('USE_CLOUD_STORAGE') if 'USE_CLOUD_STORAGE' in os.environ else False

if USE_CLOUD_STORAGE:
    # Use custom Replit App Storage backend for media files
    DEFAULT_FILE_STORAGE = 'images.storage.ReplitAppStorage'
    
    # Environment variables for cloud storage paths
    # These should be set in the Replit environment after creating buckets
    PRIVATE_OBJECT_DIR = env('PRIVATE_OBJECT_DIR') if 'PRIVATE_OBJECT_DIR' in os.environ else '/wedding-gallery/private'
    PUBLIC_OBJECT_SEARCH_PATHS = env('PUBLIC_OBJECT_SEARCH_PATHS') if 'PUBLIC_OBJECT_SEARCH_PATHS' in os.environ else '/wedding-gallery/public'
    
    # Cloud storage URLs will be served through Django for access control
    MEDIA_URL = '/api/files/'
else:
    # Fall back to local storage for development
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# Force HTTPS URLs in production
USE_TLS = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Production security settings
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# Fail fast if production is using insecure SECRET_KEY
if not DEBUG and SECRET_KEY == 'django-insecure-change-this-in-production':
    raise Exception("Production deployment requires a secure SECRET_KEY. Please set a proper SECRET_KEY environment variable.")

# Easy-thumbnails configuration
THUMBNAIL_ALIASES = {
    '': {
        'small': {
            'size': (150, 150),
            'crop': True,
            'quality': 85
        },
        'medium': {
            'size': (300, 300),
            'crop': True,
            'quality': 85
        },
        'large': {
            'size': (600, 600),
            'crop': False,
            'quality': 90
        },
    },
}

THUMBNAIL_PROCESSORS = [
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'easy_thumbnails.processors.scale_and_crop',
    'easy_thumbnails.processors.filters',
]

THUMBNAIL_DEFAULT_STORAGE = 'django.core.files.storage.FileSystemStorage'
